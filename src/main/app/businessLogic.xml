<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
xmlns:json="http://www.mulesoft.org/schema/mule/json"
xmlns:spring="http://www.springframework.org/schema/beans" 
 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

 <batch:job name="migrateOpportunitiesBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <sfdc:query config-ref="SalesforceA" query="dsql:SELECT LastModifiedDate, Name, Amount, StageName, Probability, CloseDate, Account.Id, Account.Name, Account.Industry, Account.NumberOfEmployees FROM Opportunity WHERE Amount &gt; 5000" doc:name="query Opportunities from Salesforce instance A" fetchSize="${page.size}"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="getOpportunityInBStep">
                <enricher source="#[payload == null ? null : payload.Id]" target="#[payload.Id]" doc:name="enrich payload with existing SFDC Opportunity Id">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM Opportunity WHERE Name = '#[payload['Name']]'" doc:name="query Opportunity in Salesforce instance B"/>
                </enricher>
            </batch:step>
              <batch:step name="findOrCreateAccountInBSetp" accept-expression="#['syncAccount' == '${account.sync.policy}' &amp;&amp; payload['Account'] != null]">
                <enricher source="#[payload == null ? null : payload.Id]" target="#[recordVars['accountInBId']]" doc:name="store result in accountInB">
                            <sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="query Account in  Salesforce Instance B"/>
                        </enricher>
                        <choice doc:name="Choice">
                            <when expression="#[recordVars['accountInBId'] == null]">
                                <enricher source="#[payload[0].getId()]" target="#[payload['AccountId']]" doc:name="enrich payload with AccountId">
                                    <processor-chain doc:name="Processor Chain">
                                        <dw:transform-message doc:name="Prepare Account data">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[payload.Account
- "Id"
++ (("NumberOfEmployees": payload.Account.NumberOfEmployees as :number {class: "java.lang.Integer"} default 0) when (payload.Account.NumberOfEmployees != null) )
]]]></dw:set-payload>
                                        </dw:transform-message>
                                        <sfdc:create config-ref="SalesforceB" type="Account" doc:name="create Account in Salesforce Instance B">
                                            <sfdc:objects ref="#[payload]"/>
                                        </sfdc:create>
                                    </processor-chain>
                                </enricher>
                            </when>
                            <otherwise>
                                <enricher target="#[payload['AccountId']]" doc:name="enrich payload with AccountId">
                                    <expression-transformer expression="#[recordVars['accountInBId']]" doc:name="get existing account id"/>
                                </enricher>
                            </otherwise>
                        </choice>
            </batch:step>
            <batch:step name="createOpportunitiesInBStep" accept-expression="!(payload is NullPayload)">
                <batch:commit size="200" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Prepare Opportunity data">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
($ - "LastModifiedDate"
 - "Account"
++ ("Amount": $.Amount as :number {class: "java.lang.Double"} default 0)
++ ("CloseDate": $.CloseDate as :date {class: "java.util.Date"} when $.CloseDate != null otherwise null))
}]]></dw:set-payload>
                    </dw:transform-message>
					<sfdc:upsert config-ref="SalesforceB"  type="Opportunity" doc:name="upsert Opportunities in org B" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>

					</sfdc:upsert>
                    <logger message="Upsert result: #[payload]" level="INFO" doc:name="log Upsert result"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                	<parse-template location="email/body.html" doc:name="Parse Template"/>
					<smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail" mimeType="text/html"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
   
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Anypoint Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Anypoint Template exposes to trigger it.

">
        <batch:execute name="migrateOpportunitiesBatch" doc:name="trigger migrateOpportunitiesBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
</mule>
